{"ast":null,"code":"import graph from \"./images/graph.png\";\nimport primes from \"./images/primes.jpg\";\nimport sort from \"./sort.png\";\nimport queen from \"./images/queen.PNG\";\nexport function getDetails() {\n  return [{\n    id: 1,\n    title: \"Pathfinder\",\n    description: \"Visualize graph algorithms like dijkstra, BFS, DFS\",\n    route: \"/pathfinder\",\n    img: graph\n  }, {\n    id: 2,\n    title: \"Sorting Algorithm\",\n    description: \"Compare different sorting algorithms\",\n    route: \"/sort\",\n    img: sort\n  }, {\n    id: 3,\n    title: \"Recursive Sorting\",\n    description: \"Compare different recursive sorting algorithms\",\n    route: \"/recursivesort\",\n    img: sort\n  }, {\n    id: 4,\n    title: \"N Queen\",\n    description: \"The N queens puzzle is the problem of placing N chess queens on an N*N chessboard so that no two queens threaten each other\",\n    route: \"/nqueen\",\n    img: queen\n  }, {\n    id: 5,\n    title: \"Prime Numbers\",\n    description: \"Visualize how Seive is better than brute force\",\n    route: \"/prime\",\n    img: primes\n  }];\n}","map":{"version":3,"names":["graph","primes","sort","queen","getDetails","id","title","description","route","img"],"sources":["C:/Users/Lenovo/Desktop/AlgorithmVisualizer/src/homeComponents/cardDetails.js"],"sourcesContent":["import graph from \"./images/graph.png\";\r\nimport primes from \"./images/primes.jpg\";\r\nimport sort from \"./sort.png\";\r\nimport queen from \"./images/queen.PNG\";\r\n\r\nexport function getDetails() {\r\n    return [\r\n        {\r\n            id: 1,\r\n            title: \"Pathfinder\",\r\n            description: \"Visualize graph algorithms like dijkstra, BFS, DFS\",\r\n            route: \"/pathfinder\",\r\n            img: graph\r\n        },\r\n        {\r\n            id: 2,\r\n            title: \"Sorting Algorithm\",\r\n            description: \"Compare different sorting algorithms\",\r\n            route: \"/sort\",\r\n            img: sort\r\n        },\r\n        {\r\n            id: 3,\r\n            title: \"Recursive Sorting\",\r\n            description: \"Compare different recursive sorting algorithms\",\r\n            route: \"/recursivesort\",\r\n            img: sort\r\n        },\r\n        {\r\n            id: 4,\r\n            title: \"N Queen\",\r\n            description: \"The N queens puzzle is the problem of placing N chess queens on an N*N chessboard so that no two queens threaten each other\",\r\n            route: \"/nqueen\",\r\n            img: queen\r\n        },\r\n        {\r\n            id: 5,\r\n            title: \"Prime Numbers\",\r\n            description: \"Visualize how Seive is better than brute force\",\r\n            route: \"/prime\",\r\n            img: primes\r\n        }\r\n\r\n    ]\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,oBAAoB;AACtC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAOC,KAAK,MAAM,oBAAoB;AAEtC,OAAO,SAASC,UAAUA,CAAA,EAAG;EACzB,OAAO,CACH;IACIC,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,YAAY;IACnBC,WAAW,EAAE,oDAAoD;IACjEC,KAAK,EAAE,aAAa;IACpBC,GAAG,EAAET;EACT,CAAC,EACD;IACIK,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,mBAAmB;IAC1BC,WAAW,EAAE,sCAAsC;IACnDC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAEP;EACT,CAAC,EACD;IACIG,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,mBAAmB;IAC1BC,WAAW,EAAE,gDAAgD;IAC7DC,KAAK,EAAE,gBAAgB;IACvBC,GAAG,EAAEP;EACT,CAAC,EACD;IACIG,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,SAAS;IAChBC,WAAW,EAAE,6HAA6H;IAC1IC,KAAK,EAAE,SAAS;IAChBC,GAAG,EAAEN;EACT,CAAC,EACD;IACIE,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,eAAe;IACtBC,WAAW,EAAE,gDAAgD;IAC7DC,KAAK,EAAE,QAAQ;IACfC,GAAG,EAAER;EACT,CAAC,CAEJ;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}