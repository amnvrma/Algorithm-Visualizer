{"ast":null,"code":"/**\r\n * A set of monkey-patched Array helpers.\r\n * Probably a bad idea to use these in a real production environment.\r\n * Monkey-patching is confusing to anyone seeing the project for the first\r\n * time (or coming back to it after a few weeks).\r\n * That said, this is a simple demo project, so what the hell, let's break\r\n * some rules =D\r\n */\n\n/**\r\n * Array.prototype.swap\r\n * Rearrange an array to swap the positions of two elements.\r\n * @param {Number} a - the index of the first element to swap.\r\n * @param {Number} b - the index of the second element to swap.\r\n * @returns {Array}\r\n * @example\r\n * // returns [ 'a', 'c', 'b' ]\r\n * [ 'a', 'b', 'c' ].swap(1, 2)\r\n */\nArray.prototype.swap = function (a, b) {\n  if (b >= this.length || b < 0) return this;\n\n  // Temporary variable to hold data while we juggle\n  let temp = this[a];\n  this[a] = this[b];\n  this[b] = temp;\n  return this;\n};\n\n/**\r\n * Array.range\r\n * Create a new array of length n, where the elements are numbers\r\n * from 0 to n - 1.\r\n * @param {Number} n - the desired length of the range.\r\n * @returns {Array}\r\n * @example\r\n * // returns [ 0, 1, 2, 3 ]\r\n * Array.range(4);\r\n */\nArray.range = n => Array.from(new Array(n), (x, i) => i);\n\n/**\r\n * Array.matrix\r\n * Create a new two-dimensional array, where each element is its own index.\r\n * @param {Number} x - the desired number of columns (possible x values)\r\n * @param {Number} y - the desired number of rows (possible y values)\r\n * @returns {Array}\r\n * @example\r\n * // returns [\r\n * //   [ 0, 1, 2 ],\r\n * //   [ 0, 1, 2 ]\r\n * // ]\r\n * Array.matrix(3, 2);\r\n */\nArray.matrix = (x, y) => {\n  const rows = Array.range(y);\n  const columns = Array.range(x);\n  return rows.map((row, i) => columns.slice());\n};","map":{"version":3,"names":["Array","prototype","swap","a","b","length","temp","range","n","from","x","i","matrix","y","rows","columns","map","row","slice"],"sources":["D:/AlgorithmVisualizer/src/helpers/array_helpers.js"],"sourcesContent":["/**\r\n * A set of monkey-patched Array helpers.\r\n * Probably a bad idea to use these in a real production environment.\r\n * Monkey-patching is confusing to anyone seeing the project for the first\r\n * time (or coming back to it after a few weeks).\r\n * That said, this is a simple demo project, so what the hell, let's break\r\n * some rules =D\r\n */\r\n\r\n\r\n/**\r\n * Array.prototype.swap\r\n * Rearrange an array to swap the positions of two elements.\r\n * @param {Number} a - the index of the first element to swap.\r\n * @param {Number} b - the index of the second element to swap.\r\n * @returns {Array}\r\n * @example\r\n * // returns [ 'a', 'c', 'b' ]\r\n * [ 'a', 'b', 'c' ].swap(1, 2)\r\n */\r\nArray.prototype.swap = function (a, b) {\r\n    if ( b >= this.length || b < 0 ) return this;\r\n\r\n    // Temporary variable to hold data while we juggle\r\n    let temp = this[a];\r\n    this[a] = this[b];\r\n    this[b] = temp;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Array.range\r\n * Create a new array of length n, where the elements are numbers\r\n * from 0 to n - 1.\r\n * @param {Number} n - the desired length of the range.\r\n * @returns {Array}\r\n * @example\r\n * // returns [ 0, 1, 2, 3 ]\r\n * Array.range(4);\r\n */\r\nArray.range = n => Array.from(new Array(n), (x,i) => i);\r\n\r\n/**\r\n * Array.matrix\r\n * Create a new two-dimensional array, where each element is its own index.\r\n * @param {Number} x - the desired number of columns (possible x values)\r\n * @param {Number} y - the desired number of rows (possible y values)\r\n * @returns {Array}\r\n * @example\r\n * // returns [\r\n * //   [ 0, 1, 2 ],\r\n * //   [ 0, 1, 2 ]\r\n * // ]\r\n * Array.matrix(3, 2);\r\n */\r\nArray.matrix = (x, y) => {\r\n    const rows = Array.range(y);\r\n    const columns = Array.range(x);\r\n    return rows.map( (row, i) => columns.slice() );\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,KAAK,CAACC,SAAS,CAACC,IAAI,GAAG,UAAUC,CAAC,EAAEC,CAAC,EAAE;EACnC,IAAKA,CAAC,IAAI,IAAI,CAACC,MAAM,IAAID,CAAC,GAAG,CAAC,EAAG,OAAO,IAAI;;EAE5C;EACA,IAAIE,IAAI,GAAG,IAAI,CAACH,CAAC,CAAC;EAClB,IAAI,CAACA,CAAC,CAAC,GAAG,IAAI,CAACC,CAAC,CAAC;EACjB,IAAI,CAACA,CAAC,CAAC,GAAGE,IAAI;EACd,OAAO,IAAI;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAN,KAAK,CAACO,KAAK,GAAGC,CAAC,IAAIR,KAAK,CAACS,IAAI,CAAC,IAAIT,KAAK,CAACQ,CAAC,CAAC,EAAE,CAACE,CAAC,EAACC,CAAC,KAAKA,CAAC,CAAC;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,KAAK,CAACY,MAAM,GAAG,CAACF,CAAC,EAAEG,CAAC,KAAK;EACrB,MAAMC,IAAI,GAAGd,KAAK,CAACO,KAAK,CAACM,CAAC,CAAC;EAC3B,MAAME,OAAO,GAAGf,KAAK,CAACO,KAAK,CAACG,CAAC,CAAC;EAC9B,OAAOI,IAAI,CAACE,GAAG,CAAE,CAACC,GAAG,EAAEN,CAAC,KAAKI,OAAO,CAACG,KAAK,EAAE,CAAE;AAClD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}