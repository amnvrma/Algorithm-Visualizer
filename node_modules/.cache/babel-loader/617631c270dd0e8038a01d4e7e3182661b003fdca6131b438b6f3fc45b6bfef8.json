{"ast":null,"code":"let Steps = [];\nlet Maps = [];\nlet invertBitSteps = [['q0', '0', 'q0', '1', 'R'], ['q0', '1', 'q0', '0', 'R'], ['q0', 'B', 'qe', 'B', 'R']];\nconst inverBitMap = new Map();\nfor (let i = 0; i < invertBitSteps.length; i++) {\n  inverBitMap.set(invertBitSteps[i][0] + \",\" + invertBitSteps[i][1], [invertBitSteps[i][2], invertBitSteps[i][3], invertBitSteps[i][4], i]);\n}\nSteps.push(invertBitSteps);\nMaps.push(inverBitMap);\nlet addOneSteps = [['q0', '0', 'q0', '0', 'R'], ['q0', '1', 'q0', '1', 'R'], ['q0', 'B', 'q1', 'B', 'L'], ['q1', '0', 'qe', '1', 'R'], ['q1', '1', 'q1', '0', 'L'], ['q1', 'B', 'qe', '1', 'R']];\nconst addOneMap = new Map();\nfor (let i = 0; i < addOneSteps.length; i++) {\n  addOneMap.set(addOneSteps[i][0] + \",\" + addOneSteps[i][1], [addOneSteps[i][2], addOneSteps[i][3], addOneSteps[i][4], i]);\n}\nSteps.push(addOneSteps);\nMaps.push(addOneMap);\nlet twosComplimentSteps = [['q0', '0', 'q0', '0', 'R'], ['q0', '1', 'q0', '1', 'R'], ['q0', 'B', 'q1', 'B', 'L'], ['q1', '0', 'q1', '0', 'L'], ['q1', 'B', 'qe', 'B', 'L'], ['q1', '1', 'q2', '1', 'L'], ['q2', '0', 'q2', '1', 'L'], ['q2', '1', 'q2', '0', 'L'], ['q2', 'B', 'qe', 'B', 'L']];\nconst twosComplimentMap = new Map();\nfor (let i = 0; i < twosComplimentSteps.length; i++) {\n  twosComplimentMap.set(twosComplimentSteps[i][0] + \",\" + twosComplimentSteps[i][1], [twosComplimentSteps[i][2], twosComplimentSteps[i][3], twosComplimentSteps[i][4], i]);\n}\nSteps.push(twosComplimentSteps);\nMaps.push(twosComplimentMap);\nexport function getNextStep(state, read) {\n  let algo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  if (!Maps[algo].get(state + \",\" + read)) return ['qe', 'B', 'R'];\n  return Maps[algo].get(state + \",\" + read);\n}\nexport function getTable(algo) {\n  return Steps[algo];\n}","map":{"version":3,"names":["Steps","Maps","invertBitSteps","inverBitMap","Map","i","length","set","push","addOneSteps","addOneMap","twosComplimentSteps","twosComplimentMap","getNextStep","state","read","algo","arguments","undefined","get","getTable"],"sources":["D:/AlgorithmVisualizer/src/algorithms/turing.js"],"sourcesContent":["let Steps = [];\r\nlet Maps = [];\r\nlet invertBitSteps = [\r\n    ['q0','0','q0','1','R'],\r\n    ['q0','1','q0','0','R'],\r\n    ['q0','B','qe','B','R']\r\n];\r\nconst inverBitMap = new Map();\r\nfor(let i=0;i<invertBitSteps.length;i++){\r\n    inverBitMap.set( invertBitSteps[i][0]+\",\"+invertBitSteps[i][1],[invertBitSteps[i][2],invertBitSteps[i][3],invertBitSteps[i][4],i]  );\r\n}\r\nSteps.push(invertBitSteps);\r\nMaps.push(inverBitMap);\r\n\r\nlet addOneSteps = [\r\n    ['q0','0','q0','0','R'],\r\n    ['q0','1','q0','1','R'],\r\n    ['q0','B','q1','B','L'],\r\n    ['q1','0','qe','1','R'],\r\n    ['q1','1','q1','0','L'],\r\n    ['q1','B','qe','1','R']\r\n]\r\nconst addOneMap = new Map();\r\nfor(let i=0;i<addOneSteps.length;i++){\r\n    addOneMap.set( addOneSteps[i][0]+\",\"+addOneSteps[i][1],[addOneSteps[i][2],addOneSteps[i][3],addOneSteps[i][4],i]  );\r\n}\r\nSteps.push(addOneSteps);\r\nMaps.push(addOneMap);\r\n\r\n\r\nlet twosComplimentSteps = [\r\n    ['q0','0','q0','0','R'],\r\n    ['q0','1','q0','1','R'],\r\n    ['q0','B','q1','B','L'],\r\n    ['q1','0','q1','0','L'],\r\n    ['q1','B','qe','B','L'],\r\n    ['q1','1','q2','1','L'],\r\n    ['q2','0','q2','1','L'],\r\n    ['q2','1','q2','0','L'],\r\n    ['q2','B','qe','B','L']\r\n]\r\n\r\nconst twosComplimentMap = new Map();\r\nfor(let i=0;i<twosComplimentSteps.length;i++){\r\n    twosComplimentMap.set( twosComplimentSteps[i][0]+\",\"+twosComplimentSteps[i][1],[twosComplimentSteps[i][2],twosComplimentSteps[i][3],twosComplimentSteps[i][4],i]  );\r\n}\r\nSteps.push(twosComplimentSteps);\r\nMaps.push(twosComplimentMap);\r\n\r\nexport function getNextStep(state, read, algo=0){\r\n    if( !Maps[algo].get(state+\",\"+read) ) return ['qe','B','R'];\r\n    return Maps[algo].get(state+\",\"+read);\r\n}\r\n\r\nexport function getTable(algo){\r\n    return Steps[algo];\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}